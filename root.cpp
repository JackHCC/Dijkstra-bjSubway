#include <iostream>
using namespace std;

const string stopName[94]={"pingguoyuan","gucheng","bajao amusement park","babaoshan","yuquanlu","wukesong","wangshoulu","gongzhufen","military museum","muxidi","nanlishilu","fuxingmen","xidan","tiananmen west","tiananmen east","wangfujing","dongdan","jianguomen","yonganli","guomao","dawanglu","sihui","sihuieast",
							"xizhimen","jishuitan","guoloudajie","andingmen","yonghegong","dongzhimen","dongsishitiao","chaoyangmen","beijing railway station","chongwenmen","qianmen","hepingmen","xuanwumen","changchunjie","fuchengmen","chegongzhuang",
							"dazhongsi","zhichunlu","wudaokou","shangdi","xierqi","longze","huilongguan","huoying","lishuiqiao","beiyuan","wangjing west","shaoyaoju","guangximen","liufang",
							"huoqiying","bagou","suzhoujie","haidianhuangzhuang","zhichunli","xitucheng","mudanyuan","jiandemen","beitucheng","anzhenmen","huixinxijie nankou","taiyanggong","sanyuanqiao","liangmaqiao","agricultural exhibition center","tuanjiehu","hujialou","jintaixizhao","shuangjing","jinsong","panjiayuan","shilihe","fenzhongsi","chengshousi","songjiazhuang","shiliuzhuang","dahongmen","jiaomen east","jiaomen west","caoqiao","jijiamiao","shoujingmao","fengtai railway station","niwa","xiju","liuliqiao","lianhuaqiao","xidiaoyutai","cishousi","chedaogou","changchunqiao"} ;

const int maxnum = 200;      
const int maxint = 99999;
int p, q;
// 各数组都从下标1开始
int dist[maxnum];     // 表示当前点到源点的最短路径长度
int path[maxnum];     // 记录当前点的前一个结点
int c[maxnum][maxnum];   // 记录图的两点间路径长度
int  n;             // 图的结点数和路径数

void Dijkstra(int n, int v, int *dist, int *path, int c[maxnum][maxnum])
{
	//int p=1;
	bool s[maxnum];    // 判断是否已存入该点到S集合中
	for (int i = 1; i <= n; i++)
	{
		dist[i] = c[v][i];
		s[i] = 0;     // 初始都未用过该点
		if (dist[i] < maxint)
			path[i] = v;
		else
			path[i] = 0;
	}
	dist[v] = 0;
	s[v] = 1;

	for (int i = 2; i <= n; i++)
	{
		int distance = maxint;
		
		int k = v;
		// 找出当前未使用的点j的dist[j]最小值
		for (int j = 1; j <= n; j++)
		if ((!s[j]) && dist[j]<distance)
		{
			k = j;              // k保存当前邻接点中距离最小的点的号码
			distance = dist[j];
		}
		s[k] = 1;    // 表示k点已存入S集合中

		// 更新dist
		for (int j = 1; j <= n; j++)
		if ((!s[j]) && c[k][j]!=maxint)
		{
			int newdist = dist[k] + c[k][j];
			if (newdist < dist[j])
			{
				dist[j] = newdist;
				path[j] = k;
			}
		}
	}
}

// 查找从源点v到终点k的路径，并输出
void searchPath(int *path, int v, int k)
{
	int search[maxnum];
	int anot = 1;
	search[anot] = k;
	anot++;
	int distance = path[k];
	while (distance != v)
	{
		search[anot] = distance;
		anot++;
		distance = path[distance];
	}
	search[anot] = v;
	for (int i = anot; i >= 1; --i)
	if (i != 1)
		cout << search[i] << " -> ";
	else
		cout << search[i] << endl;
}
void start0()
{
	cout << "一号线\n1苹果园2古城3八角游乐园4八宝山5玉泉路6五棵松7万寿路8公主坟9军事博物馆10木樨地11南礼士路12复兴门13西单14天安门西15天安门东16王府井17东单18建国门19永安里20国贸21大望路22四惠23四惠东\n\n";
	cout << "二号线\n24西直门25积水潭26鼓楼东大街27安定门28雍和宫29东直门30东四十条31朝阳门18建国门32北京站33崇文门34前门35和平门36宣武门37长椿街12复兴门38阜成门39车公庄\n\n";
	cout << "十三号线\n24西直门40大钟寺41知春路42五道口43上地44西二旗45龙泽46回龙观47霍营48立水桥49北苑50望京西51芍药居52光熙门53柳芳29东直门\n\n";
	cout << "十号线\n54火器营55巴沟56苏州街57海淀黄庄58知春里41知春路59西土城60牡丹园61建德门62北土城63安贞门64惠新西街南口52芍药居65太阳宫66三元桥67亮马桥68农业展览馆69团结湖70呼家楼71金台夕照20国贸72双井73劲松74潘家园75十里河76分钟寺77成寿寺78宋家庄79石榴庄80大红门81角门东82角门西83草桥84纪家庙85首经贸86丰台站87泥洼88西局89六里桥90莲花桥8公主坟91西钓鱼台92慈寿寺93车道沟94长春桥 \n\n";
	cout << "五号线\n95宋家庄96刘家窑97蒲黄榆98天坛东门99磁器口33崇文门17东单100灯市口101东四102张自忠路103北新桥28雍和宫104和平里北街105和平西桥64惠新西街南口106惠新西街北口107大屯桥东108北苑路北109立水桥南48立水桥110天通苑南111天通苑112天通苑北 \n\n";
	cout << "四号线\n113安河桥北114北宫门115西苑116圆明园117北京大学东门118中关村57海淀黄庄119人民大学120魏公村121国家图书馆122动物园24西直门123新街口124平安里125西四126灵境胡同13西单36宣武门127菜市口128陶然亭129北京南站130马家堡81角门西131公益西桥\n\n";
	
	int n = 131;

	for (int i = 1; i <= n; i++)	path[i] = 0;
	// 初始化c[][]为maxint
	for (int i = 1; i <= n; ++i)
	for (int j = 1; j <= n; ++j)
		c[i][j] = maxint;

	//一号线
	c[1][2] = c[2][1] = 2606;
	c[2][3] = c[3][2] = 1921;
	c[3][4] = c[4][3] = 1953;
	c[4][5] = c[5][4] = 1479;
	c[5][6] = c[6][5] = 1810;
	c[6][7] = c[7][6] = 1778;
	c[7][8] = c[8][7] = 1313;
	c[8][9] = c[9][8] = 1172;
	c[9][10] = c[10][9] = 1166;
	c[10][11] = c[11][10] = 1291;
	c[11][12] = c[12][11] = 424;
	c[12][13] = c[13][12] = 1590;
	c[13][14] = c[14][13] = 1217;
	c[14][15] = c[15][14] = 925;
	c[15][16] = c[16][15] = 852;
	c[16][17] = c[17][16] = 774;
	c[17][18] = c[18][17] = 1230;
	c[18][19] = c[19][18] = 1377;
	c[19][20] = c[20][19] = 790;
	c[20][21] = c[21][20] = 1385;
	c[21][22] = c[22][21] = 1673;
	c[22][23] = c[23][22] = 1714;
	//二号线
	c[24][39] = c[39][24] = 909;
	c[38][39] = c[39][38] = 960;
	c[12][38] = c[38][12] = 1832;
	c[12][37] = c[37][12] = 1234;
	c[36][37] = c[37][36] = 929;
	c[35][36] = c[36][35] = 851;
	c[34][35] = c[35][34] = 1171;
	c[33][34] = c[34][33] = 1634;
	c[32][33] = c[33][32] = 1023;
	c[18][32] = c[32][18] = 945;
	c[18][31] = c[31][18] = 1763;
	c[31][30] = c[30][31] = 1027;
	c[30][29] = c[29][30] = 824;
	c[29][28] = c[28][29] = 2228;
	c[28][27] = c[27][28] = 794;
	c[27][26] = c[26][27] = 1237;
	c[26][25] = c[25][26] = 1766;
	c[25][24] = c[24][25] = 1899;
	//十三号线
	c[24][40] = c[40][24] = 2839;
	c[40][41] = c[41][40] = 1206;
	c[41][42] = c[42][41] = 1829;
	c[42][43] = c[43][42] = 4866;
	c[43][44] = c[44][43] = 2538;
	c[44][45] = c[45][44] = 3623;
	c[45][46] = c[46][45] = 1423;
	c[46][47] = c[47][46] = 2110;
	c[47][48] = c[48][47] = 4785;
	c[48][49] = c[49][48] = 2272;
	c[49][50] = c[50][49] = 6720;
	c[50][51] = c[51][50] = 2152;
	c[51][52] = c[52][51] = 1110;
	c[52][53] = c[53][52] = 1135;
	c[53][29] = c[29][53] = 1769;
	//十号线
	c[54][55] = c[55][54] = 1495;
	c[55][56] = c[56][55] = 1110;
	c[56][57] = c[57][56] = 950;
	c[57][58] = c[58][57] = 975;
	c[41][58] = c[58][41] = 1058;
	c[59][41] = c[41][59] = 1101;
	c[59][60] = c[60][59] = 1330;
	c[60][61] = c[61][60] = 973;
	c[61][62] = c[62][61] = 1100;
	c[62][63] = c[63][62] = 1020;
	c[63][64] = c[64][63] = 982;
	c[64][52] = c[52][64] = 1712;
	c[52][65] = c[65][52] = 1003;
	c[65][66] = c[66][65] = 1759;
	c[66][67] = c[67][66] = 1506;
	c[67][68] = c[68][67] = 914;
	c[68][69] = c[69][68] = 853;
	c[69][70] = c[70][69] = 1149;
	c[70][71] = c[71][70] = 734;
	c[71][20] = c[20][71] = 835;
	c[20][72] = c[72][20] = 1759;
	c[72][73] = c[73][72] = 1006;
	c[73][74] = c[74][73] = 1021;
	c[74][75] = c[75][74] = 1097;
	c[75][76] = c[76][75] = 1804;
	c[76][77] = c[77][76] = 1058;
	c[77][78] = c[78][77] = 1677;
	c[78][79] = c[79][78] = 1269;
	c[79][80] = c[80][79] = 1244;
	c[80][81] = c[81][80] = 1130;
	c[81][82] = c[82][81] = 1254;
	c[82][83] = c[83][82] = 1688;
	c[83][84] = c[84][83] = 1547;
	c[84][85] = c[85][84] = 1143;
	c[85][86] = c[86][85] = 1717;
	c[86][87] = c[87][86] = 954;
	c[87][88] = c[88][87] = 749;
	c[88][89] = c[89][88] = 1584;
	c[89][90] = c[90][89] = 2392;
	c[90][8] = c[8][90] = 1016;
	c[8][91] = c[91][8] = 2386;
	c[91][92] = c[92][91] = 1214;
	c[92][93] = c[93][92] = 1590;
	c[93][94] = c[94][93] = 1205;
	c[94][54] = c[54][94] = 961;
	//五号线
	c[112][111] = c[111][112] = 939;
	c[111][110] = c[110][111] = 965;
	c[110][48] = c[48][110] = 1544;
	c[48][109] = c[109][48] = 1305;
	c[109][108] = c[108][109] = 1286;
	c[108][107] = c[107][108] = 3000;
	c[107][106] = c[106][107] = 1838;
	c[106][64] = c[64][106] = 1122;
	c[64][105] = c[105][64] = 1025;
	c[105][104] = c[104][105] = 1059;
	c[104][28] = c[28][104] = 1151;
	c[103][28] = c[28][103] = 866;
	c[103][102] = c[102][103] = 791;
	c[102][101] = c[101][102] = 1016;
	c[101][100] = c[100][101] = 848;
	c[100][17] = c[17][100] = 945;
	c[17][33] = c[33][17] = 821;
	c[17][99] = c[99][17] = 876;
	c[99][98] = c[98][99] = 1183;
	c[98][97] = c[97][98] = 1900;
	c[97][96] = c[96][97] = 905;
	c[96][95] = c[95][96] = 1670;
	//四号线
	c[113][114] = c[114][113] = 1363;
	c[114][115] = c[115][114] = 1251;
	c[115][116] = c[116][115] = 1672;
	c[116][117] = c[117][116] = 1295;
	c[117][118] = c[118][117] = 887;
	c[118][57] = c[57][118] = 900;
	c[119][57] = c[57][119] = 1063;
	c[119][120] = c[120][119] = 1051;
	c[120][121] = c[121][120] = 1658;
	c[121][122] = c[122][121] = 1517;
	c[122][24] = c[24][122] = 1441;
	c[123][24] = c[24][123] = 1025;
	c[123][124] = c[124][123] = 1100;
	c[124][125] = c[125][124] = 1100;
	c[125][126] = c[126][125] = 869;
	c[126][13] = c[13][126] = 1011;
	c[36][13] = c[13][36] = 815;
	c[36][127] = c[127][36] = 1152;
	c[127][128] = c[128][127] = 1200;
	c[128][129] = c[129][128] = 1643;
	c[129][130] = c[130][129] = 1480;
	c[130][81] = c[81][130] = 827;
	c[81][131] = c[131][81] = 989;

	for (int i = 1; i <= n; ++i)
		dist[i] = maxint;
}
void money()
{
	int money;
	if (dist[q]/1000 < 6) cout << "所花费的钱为3元\n";
	else if (dist[q]/1000 >= 6 && dist[q] / 1000  < 12) cout << "所花费的钱为4元\n";
	else if (dist[q]/1000 >= 12 && dist[q] / 1000  < 22) cout << "所花费的钱为5元\n";
	else if (dist[q]/1000 >= 22 && dist[q] / 1000 < 32) cout << "所花费的钱为6元\n";
	else if (dist[q]/1000 >= 32 ) {
		money=6+(dist[q]-32000)/20;
		cout << "所花费的钱为"<<money<<"元\n";
	}
}
int main()
{
	start0();
	
	string pp,qq;
	
	while(1)
	{cout<<"输入上述站台的编号来计算路程价格：" <<endl; 
	
	
	getline(cin,pp);
	getline(cin,qq);
	//cin >> pp;
	//cin >> qq;
	
	//for(int i=0;i<94;i++){}
	//字符串转化
	for(int i=0;i<94;i++){
		if(pp==stopName[i]){
			p=i+1;
			if(i==94){
				cout<<"您输入的地铁站名不存在"<<endl; 
				break;
			}
			break;
			
		}	
	} 
		for(int i=0;i<94;i++){
		if(qq==stopName[i]){
			q=i+1;
			if(i==94){
				cout<<"您输入的地铁站名不存在"<<endl; 
				break;
			}
			break;
		}	
	} 
	
	Dijkstra(94, p, dist, path, c);
	double d=dist[q]/1000.00;
	// 最短路径长度
	cout << "需要经历" << d << "Km" << endl;
	money();
	cout << "途经的站台有";
	searchPath(path, p, q);	//表示点1到点n的路径
	  //cin >> n;//保持输入，查看结果
	}
}              
